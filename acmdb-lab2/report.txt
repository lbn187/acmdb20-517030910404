Page eviction policy
use a priority queue to rank the pages by their occurence times. Each time buffer pool is full, push the page with the fewest occurrences out of the queue. For convinence, I use a map to store each page's occurence times, and each time one page's occurence time updates, I update the value of pages in priority queue.

Insertion Method
Once a leaf page is full, split the page into two pages, and choose the key entry up to the parent.
Once a internal page is full, split the page into two pages and a middle entry, let the middle entry up to the parent.

Deletion Method
Once a leaf page is free, borrow the tuple from the brother page until more than half, if we can't borrow from the brother page, we merge two pages and delete the related entry between two pages.
Once a internal page is free, borrow the entry from the brother page until more than half, and it is worth noting that the entry of the parent node needs to be moved over. If we can't borrow from the brother page, we merge two pages and the parent entry into one page, and delete the parent entry from parent page.

BufferPool
pageMap - Map the PageId into Page
pageNum - Count the number of times the page appears
pageQueue - The priority queue to detimine page's dequeue order by their occurence

I spent about one day.
